generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
enum BillStatus {
  UNPAID
  PAID
  OVERDUE
  PARTIALLY_PAID
  VOIDED
}

model User {
  id          String     @id @default(uuid())
  email       String     @unique
  username    String     @unique
  password    String
  role        UserRole
  profile     Profile?
  apiKey      ApiKey?
  bills       Bill[]
  payments    Payment[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  readingWater    ReadingWater[]
}

model Profile {
  id          String    @id @default(uuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  name        String
  address     String
  phoneNumber String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  Complaint Complaint[]
}

model ApiKey {
  id          String    @id @default(uuid())
  key         String    @unique @default(uuid()) // API key
  userId      String    @unique // Each customer can have one API key
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


model ReadingWater {
  id         String    @id @default(uuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  waterUsage  Float     // Water consumption value (e.g., cubic meters)
  createdAt  DateTime  @default(now())
}

model Bill {
  id          String      @id @default(uuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  amount      Float       // Total amount of the bill
  dueDate     DateTime
  billingMonth DateTime // Add this field
  status      BillStatus  @default(UNPAID)
  payments    Payment[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Cost{
  id         String     @id @default(uuid())
  costperMeter Float
}


model Payment {
  id         String     @id @default(uuid())
  billId     String
  bill       Bill       @relation(fields: [billId], references: [id])
  userId     String
  user       User       @relation(fields: [userId], references: [id])
  amount     Float      // Payment amount
  date       DateTime
  createdAt  DateTime   @default(now())
}

model Complaint {
  id         String     @id @default(uuid())
  profileId String
  profile    Profile   @relation(fields: [profileId], references: [id])
  name       String
  description String
  status     ComplaintStatus     // "Pending", "Resolved"
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

}


enum ComplaintStatus {
  PENDING
  RESOLVED
}

enum UserRole {
  ADMIN
  CUSTOMER
}
